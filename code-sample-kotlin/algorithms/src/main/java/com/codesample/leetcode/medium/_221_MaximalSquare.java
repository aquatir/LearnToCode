package com.codesample.leetcode.medium;

public class _221_MaximalSquare {
    static class Solution {

        // let dp[i][j] be size of square which ends in [i][j]

        // 1 0 1 0 0    1 0 1 0 0   1 0 1 0 0
        // 1 0 1 1 1    1 0 1 1 1   1 0 1 1 1
        // 1 1 1 1 1    1 1 1 1 1   1 1 1 0 1
        // 1 1 1 1 1    1 0 0 0 0   1 0 1 1 1

        // 1 0 1 0 0    1 0 1 0 0   1 0 1 0 0
        // 1 0 1 1 1    1 0 1 1 1   1 0 1 1 1
        // 1 1 1 2 2    1 1 1 2 2   1 1 1 0 1
        // 1 2 2 2 3    1 0 0 0 0   1 0 1 1 1
        public int maximalSquare(char[][] matrix) {
            if (matrix.length == 0) return 0;
            int m = matrix.length;
            int n = matrix[0].length;
            int max = 0;

            int[][] b = new int[m + 1][n + 1];
            for (int i = 1; i <= m; i++) {
                for (int j = 1; j <= n; j++) {
                    if (matrix[i - 1][j - 1] == '1') {
                        b[i][j] = Math.min(
                                Math.min(
                                        b[i][j - 1],
                                        b[i - 1][j - 1]
                                ),
                                b[i - 1][j]
                        ) + 1;
                        max = Math.max(b[i][j], max);
                    }
                }
            }
            return max * max;
        }
    }

    public static void main(String[] args) {
        var s = new Solution();

        // [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
        System.out.println(s.maximalSquare(new char[][]{ // expected = 4
                {'1', '0', '1', '0', '0'},
                {'1', '0', '1', '1', '1'},
                {'1', '1', '1', '1', '1'},
                {'1', '0', '0', '1', '0'}
        }));

        // [["1","1","1","1","0"],["1","1","1","1","0"],["1","1","1","1","1"],["1","1","1","1","1"],["0","0","1","1","1"]]

        // dp ex
        // 1 1 1 1 0
        // 1 2 2 2 0
        // 1 2 3 3 1
        // 1 2 3 4 2
        // 0 0 1 2 3
        //
        System.out.println(s.maximalSquare(new char[][]{ // expected = 16
                {'1', '1', '1', '1', '0'},
                {'1', '1', '1', '1', '0'},
                {'1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1'},
                {'0', '0', '1', '1', '1'}
        }));

        // [["0","0","0","1"],["1","1","0","1"],["1","1","1","1"],["0","1","1","1"],["0","1","1","1"]]  ex = 9
        // ex dp:
        // 0 0 0 1
        // 1 1 0 1
        // 1 2 1 1
        // 0 1 2 2
        // 0 1 2 3
        System.out.println(s.maximalSquare(new char[][]{ // expected = 9
                {'0', '0', '0', '1'},
                {'1', '1', '0', '1'},
                {'1', '1', '1', '1'},
                {'0', '1', '1', '1'},
                {'0', '1', '1', '1'}
        }));

        // [["1","1","1","1","1","1","1","1"]
        // ,["1","1","1","1","1","1","1","0"]
        // ,["1","1","1","1","1","1","1","0"]
        // ,["1","1","1","1","1","0","0","0"]
        // ,["0","1","1","1","1","0","0","0"]]
        // ex = 25

        // dp ex
        // 1 1 1 1 1 1 1 1
        // 1 2 2 2 2 2 2 0
        // 1 2 3 3 3 3 3 0
        // 1 2 3 4 4 0 0 0
        // 0 1 2 3 4 0 0 0
        System.out.println(s.maximalSquare(new char[][]{ // expected = 16
                {'1', '1', '1', '1', '1', '1', '1', '1'},
                {'1', '1', '1', '1', '1', '1', '1', '0'},
                {'1', '1', '1', '1', '1', '1', '1', '0'},
                {'1', '1', '1', '1', '1', '0', '0', '0'},
                {'0', '1', '1', '1', '1', '0', '0', '0'},
        }));

        // [["0","1","1","0","1"]
        // ,["1","1","0","1","0"]
        // ,["0","1","1","1","0"]
        // ,["1","1","1","1","0"]
        // ,["1","1","1","1","1"]
        // ,["0","0","0","0","0"]] ex = 9
        System.out.println(s.maximalSquare(new char[][]{ // expected = 9
                {'0', '1', '1', '0', '1'},
                {'1', '1', '0', '1', '0'},
                {'0', '1', '1', '1', '0'},
                {'1', '1', '1', '1', '0'},
                {'1', '1', '1', '1', '1'},
                {'0', '0', '0', '0', '0'}
        }));
    }
}
