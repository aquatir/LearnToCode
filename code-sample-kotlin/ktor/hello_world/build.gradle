import groovy.xml.MarkupBuilder

buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:5.1.0"
    }
}

apply plugin: 'kotlin'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'application'

group 'codesample.kotlin.ktor'
version '0.0.1'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url 'https://kotlin.bintray.com/kotlinx' }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-auth:$ktor_version"
    implementation "io.ktor:ktor-auth-jwt:$ktor_version"
    implementation "io.ktor:ktor-gson:$ktor_version"
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-gson:$ktor_version"
    implementation "io.ktor:ktor-client-logging-jvm:$ktor_version"

    implementation "com.orbitz.consul:consul-client:1.3.6"
    implementation "org.yaml:snakeyaml:1.24"

    testCompile "io.ktor:ktor-server-tests:$ktor_version"
    testCompile "io.ktor:ktor-client-mock:$ktor_version"
    testCompile "io.ktor:ktor-client-mock-jvm:$ktor_version"
}

shadowJar {
    baseName = 'hello-world-ktor'
    classifier = null
    version = null
}

// TODO: Add jooq later
//task jooq {
//    doLast {
//        def writer = new StringWriter()
//        def xml = new MarkupBuilder(writer)
//                .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd') {
//                    jdbc() {
//                        driver('org.postgresql.Driver')
//                        url("jdbc:postgresql://host:port/dbname")
//                        user("pg")
//                        password(System.getenv("DATABASE_PASSWORD"))
//                    }
//                    generator() {
//                        strategy() {
//                            name('org.jooq.codegen.example.JPrefixGeneratorStrategy')
//                        }
//                        database() {
//                            excludes('ST_.*|_ST.*')
//                            name("org.jooq.meta.postgres.PostgresDatabase")
//                            inputSchema("seal_data")
//                            forcedTypes() {
//                                forcedType() {
//                                    userType('org.postgis.Geometry')
//                                    types('geometry|GEOMETRY|geography')
//                                    binding('online.oboz.seal.eventsDaemon.utils.jooq.PostgisGeometryBinding')
//                                }
//                            }
//                        }
//
//                        // Watch out for this caveat when using MarkupBuilder with "reserved names"
//                        // - https://github.com/jOOQ/jOOQ/issues/4797
//                        // - http://stackoverflow.com/a/11389034/521799
//                        // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
//                        generate([:]) {
//                            pojos true
//                            daos true
//                        }
//                        target() {
//                            packageName('online.oboz.seal.eventsDaemon.db')
//                            directory("${rootDir}/src_generated")
//                        }
//                    }
//                }
//
//        GenerationTool.generate(writer.toString())
//    }
//}


// TODO: Inject application name into app
//processResources {
//    from(sourceSets["main"].resources.srcDirs) {
//        include("**/bootstrap.yml","**/application.yml","**/banner.txt")
//        filter{ line->
//
//            def lineReplaced = line.replace("APPLICATION_NAME", "${project.properties.get("rootProject.name")}")
//            if(project.findProperty('persist_git_info') == "true") {
//                return lineReplaced.replace("GIT_SNAPSHOT_COMMIT", project.ext.git["git.commit.id.abbrev"])
//                        .replace("GIT_SNAPSHOT_BRANCH",project.ext.git["git.branch"])
//            }else {
//                return lineReplaced
//            }
//        }
//    }
//    dependsOn("generateGitProperties")
//}
