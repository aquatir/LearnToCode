/*
 * This file is generated by jOOQ.
 */
package com.comesample.ktor.jooq.tables;


import com.comesample.ktor.jooq.JUserAccess;
import com.comesample.ktor.jooq.Keys;
import com.comesample.ktor.jooq.tables.records.JUsersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JUsers extends TableImpl<JUsersRecord> {

    private static final long serialVersionUID = 32964573;

    /**
     * The reference instance of <code>user_access.users</code>
     */
    public static final JUsers USERS = new JUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JUsersRecord> getRecordType() {
        return JUsersRecord.class;
    }

    /**
     * The column <code>user_access.users.uuid</code>.
     */
    public final TableField<JUsersRecord, UUID> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>user_access.users.created_at</code>.
     */
    public final TableField<JUsersRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>user_access.users.updated_at</code>.
     */
    public final TableField<JUsersRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>user_access.users.deleted_at</code>.
     */
    public final TableField<JUsersRecord, LocalDateTime> DELETED_AT = createField(DSL.name("deleted_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>user_access.users</code> table reference
     */
    public JUsers() {
        this(DSL.name("users"), null);
    }

    /**
     * Create an aliased <code>user_access.users</code> table reference
     */
    public JUsers(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>user_access.users</code> table reference
     */
    public JUsers(Name alias) {
        this(alias, USERS);
    }

    private JUsers(Name alias, Table<JUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private JUsers(Name alias, Table<JUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> JUsers(Table<O> child, ForeignKey<O, JUsersRecord> key) {
        super(child, key, USERS);
    }

    @Override
    public Schema getSchema() {
        return JUserAccess.USER_ACCESS;
    }

    @Override
    public UniqueKey<JUsersRecord> getPrimaryKey() {
        return Keys.USERS_PKEY;
    }

    @Override
    public List<UniqueKey<JUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<JUsersRecord>>asList(Keys.USERS_PKEY);
    }

    @Override
    public JUsers as(String alias) {
        return new JUsers(DSL.name(alias), this);
    }

    @Override
    public JUsers as(Name alias) {
        return new JUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsers rename(String name) {
        return new JUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsers rename(Name name) {
        return new JUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
