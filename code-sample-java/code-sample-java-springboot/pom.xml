<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <properties>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <!-- From base spring-boot here we have examples of:

    - @EnableConfigurationProperties annotation (see SpringBootRunner.java)
    - @EnableCaching annotation (see SpringBootRunner.java)

    Other stuff is described below in dependencies section (before each dependency)
    -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.6.RELEASE</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>springboot</artifactId>

    <dependencies>

        <!-- Here we use mostly basic stuff for web -> @RestController, @RequestMapping with @PathVariable, etc.
        No fancy web stuff currently available -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Info about lombok project: https://projectlombok.org/
        Note: When using Idea, you'll need to allow annotation processing in order for lombok to work properly.
        Also in order to allow idea to identify lombok code (e.g. know that setters exist even through they are
        not generated yet, you need to install 'Lombok plugin' for idea

        Almost everything in this project is annotated with @Slf4j which is lombok's way to instantiate a logger. Some
        classes are also annotated with @Data/@Getter/@Setter which are also handy ways to write less code
        -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.20</version>
            <scope>provided</scope>
        </dependency>

        <!-- spring-boot-devtools is a powerful development tool which allow you to spend less time launching your
        application and more time coding.

        it provides various ways to restart your spring-boot application. Restarting is generally faster then shutting
        down and booting your app again so you probably should stick to it. Another note: devtools is not included if
        you launch your app with java -jar or with special classloaders (Read spring-boot docs for more info).

        If using idea you would need to do some more work in order for auto-restart to work
        1. Build project automatically in Settings -> Build, Execution, Deployment -> Compiler -> Build project
        automatically
        2. Allow rebuild when running. Open magic Idea every-option-indexer with ctrl-shift-a (Command-ctrl-A form macs,
        you get the idea) -> type in registry -> find and allow 'compiler.automake.allow.when.app.running'
        3. Note: Reload only happens when files on classpath change. For example me changing this pom does not trigger
        autoreload, however changes to classes (e.g. HelloWorldController) or app properties (application.yml) DO
        trigger reload

        Also note: reloading is not the only option that is provided by spring-boot-devtools. As always read full doc
        at https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html to see more
        (For some reason you meet devtools reference here and there in original doc even in other chapters, so you
        should probably simply read the whole documentation to get the idea)
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- We use RabbitMQ here as AMQP implementation to implement simple "Hello world" example with messages
        getting sent to a single queue.
        You'll need to configure rabbit in order for it to work. Please see rabbit docs to see how to do it:
            https://www.rabbitmq.com/download.html

        See package learn_to_code.springboot.rabbit for info -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>

        <!-- We created central configuration server with spring cloud in code-sample-java-springboot-config-server.
        In order to access it, it's url should be specified in client's (this app) properties -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-config-client</artifactId>
            <version>1.1.3.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Thymeleaf is a powerful template engine for css/js/html/xml and some other formats which can be used as
        MVC driver for Spring MVC applications. Here we are merely scathing it's full potential in order to show some
        simple login forms -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>



    </dependencies>

</project>